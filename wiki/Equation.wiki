#summary Tutorial on using the Equations API

= Introduction =

Writing succinct and readable linear algebra code in Java using any library is problematic.  Originally EJML just offered two API's for performing linear algebra.  A procedural API which provided complete control over memory and which algorithms were used, but was verbose and had a sharper learning curve.  Alternatively you could use an easy to use object oriented API but lose control over memory and had a limited set of operators.  Neither of these API's produces code which is all that similar to how equations are written mathematically.

Languages, such as Matlab, are specifically designed for processing matrices and are much closer to mathematical notation.  C++ offers the ability to overload operators allowing for more natural code, see Eigen.  To overcome this problem EJML now provides the _Equation_ API which allows a Matlab/Octave like notation to be used.

This is achieved by parsing text strings with the equations inside of it and converting it into a set of executable instructions.  Below is an example comparing the different API's offered in BoofCV.

Equations
{{{
eq.process("K = P*H'*inv( H*P*H' + R )");
}}}

SimpleMatrix
{{{
SimpleMatrix S = H.mult(P).mult(H.transpose()).plus(R);
SimpleMatrix K = P.mult(H.transpose().mult(S.invert()));
}}}

Procedural
{{{
mult(H,P,c);
multTransB(c,H,S);
addEquals(S,R);
if( !invert(S,S_inv) ) throw new RuntimeException("Invert failed");
multTransA(H,S_inv,d);
mult(P,d,K);
}}}

Equations is designed to have minimal overhead.  It runs almost as fast as the procedural API and can be used such that all memory predeclared.  Predeclaring memory is particularly important in embedded applications.

= Basic Usage =

= Advanced Usage =

= Future Work =

= List of Functions =
